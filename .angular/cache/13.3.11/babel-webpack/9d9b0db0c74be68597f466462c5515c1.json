{"ast":null,"code":"var BiMap;\n\nBiMap = function () {\n  BiMap.prototype.klength = 0;\n  BiMap.prototype.vlength = 0;\n  BiMap.prototype.kindex = 0;\n  BiMap.prototype.throwOnError = false;\n\n  function BiMap(A) {\n    var k, v;\n    this.kv = {};\n    this.vk = {};\n\n    if (A != null) {\n      for (k in A) {\n        v = A[k];\n        this.push(k, v);\n      }\n    }\n  }\n\n  BiMap.prototype.push = function (k, v) {\n    return this.insert(k, v, \"push\");\n  };\n\n  BiMap.prototype.appendKey = function (k, v) {\n    return this.insert(k, v, \"appendKey\");\n  };\n\n  BiMap.prototype.appendVal = function (k, v) {\n    return this.insert(k, v, \"appendVal\");\n  };\n\n  BiMap.prototype.set = function (k, v) {\n    return this.insert(k, v, \"set\");\n  };\n\n  BiMap.prototype.type = function (a) {\n    var t;\n    t = typeof a;\n\n    if (t === \"number\" && a !== a) {\n      return \"NaN\";\n    }\n\n    if (t !== \"object\") {\n      return t;\n    }\n\n    t = toString.call(a);\n\n    if (t === \"[object Object]\") {\n      return \"object\";\n    }\n\n    if (t === \"[object Array]\") {\n      return \"array\";\n    }\n\n    if (t === \"[object Boolean]\") {\n      return \"boolean\";\n    }\n\n    if (t === \"[object Null]\") {\n      return \"null\";\n    }\n  };\n\n  BiMap.prototype._assign = function (k, v, type, reverse) {\n    var dir, i, rdir, _i, _len;\n\n    if (type == null) {\n      type = \"push\";\n    }\n\n    if (reverse == null) {\n      reverse = false;\n    }\n\n    if (k > this.kindex) {\n      this.kindex++;\n    }\n\n    dir = reverse ? \"vk\" : \"kv\";\n    rdir = dir === \"vk\" ? \"kv\" : \"vk\";\n\n    if (type === \"push\") {\n      if (!(this[dir][k] != null || this[rdir][void 0] === k || this[rdir][null] === k)) {\n        this[dir][k] = v;\n        return true;\n      } else {\n        return this.error(\"\" + dir + \" mapping for \" + k + \" already exists\");\n      }\n    } else if (type === \"appendVal\") {\n      if (reverse) {\n        if (this.vk[k] != null) {\n          if (\"array\" !== this.type(this.vk[k])) {\n            this.vk[k] = [this.vk[k]];\n          }\n\n          this.vk[k][this.type(v) === \"array\" ? \"concat\" : \"push\"](v);\n        } else {\n          this.vk[k] = v;\n        }\n\n        return true;\n      }\n\n      if (this.kv[k] == null) {\n        this.kv[k] = [];\n      } else if (\"array\" !== this.type(this.kv[k])) {\n        this.kv[k] = [this.kv[k]];\n      }\n\n      this.kv[k][this.type(v) === \"array\" ? \"concat\" : \"push\"](v);\n\n      if (\"array\" === this.type(v)) {\n        for (_i = 0, _len = v.length; _i < _len; _i++) {\n          i = v[_i];\n          this.kv[k].push(i);\n        }\n      }\n\n      return true;\n    } else if (type === \"set\") {\n      this[dir][k] = v;\n      return true;\n    }\n  };\n\n  BiMap.prototype.insert = function (k, v, type) {\n    var ktype, vtype;\n\n    if (type == null) {\n      type = \"push\";\n    }\n\n    if (k == null) {\n      return this.error(\"At least one argument required by insert()\");\n    }\n\n    ktype = this.type(k);\n\n    if (v == null) {\n      if (\"array\" === this.type(k)) {\n        return function () {\n          var _i, _len, _results;\n\n          _results = [];\n\n          for (_i = 0, _len = k.length; _i < _len; _i++) {\n            v = k[_i];\n\n            _results.push(this.insert(++this.kindex - 1, v, type));\n          }\n\n          return _results;\n        }.call(this);\n      } else if (\"object\" === this.type(k)) {\n        return this.traverse(k, function (v, path) {\n          return this.insert(path, v, type);\n        }.bind(this));\n      } else {\n        return this.insert(++this.kindex - 1, k, type);\n      }\n    } else if (this.type(k) === \"number\" && k > this.kindex) {\n      this.kindex = k + 1;\n    }\n\n    vtype = this.type(v);\n\n    if (vtype === \"object\") {\n      return this.traverse(v, function (v, path) {\n        return this.insert(\"\" + k + \".\" + path, v, type);\n      }.bind(this));\n    } else if (vtype === \"array\") {\n      if (ktype === \"array\") {\n        this.insertArray(v, k, type, true);\n      }\n\n      return this.insertArray(k, v, type);\n    } else if (ktype === \"array\") {\n      return this.insertArray(v, k, type, true);\n    } else {\n      if (this._assign(k, v, type)) {\n        return this._assign(v, k, type, true);\n      }\n\n      return false;\n    }\n  };\n\n  BiMap.prototype.insertArray = function (k, array, type, reverse) {\n    var i, r, _i, _len;\n\n    if (type == null) {\n      type = \"push\";\n    }\n\n    if (reverse == null) {\n      reverse = false;\n    }\n\n    if (this.type(k) !== \"array\") {\n      this._assign(k, array, type, reverse);\n    }\n\n    r = function () {\n      var _i, _len, _results;\n\n      _results = [];\n\n      for (_i = 0, _len = array.length; _i < _len; _i++) {\n        i = array[_i];\n\n        _results.push(this._assign(i, k, type, !reverse));\n      }\n\n      return _results;\n    }.call(this);\n\n    for (_i = 0, _len = r.length; _i < _len; _i++) {\n      i = r[_i];\n\n      if (!i) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  BiMap.prototype.traverse = function (obj, cb) {\n    var k, npath, path, v, _results;\n\n    path = arguments[2] || \"\";\n\n    if (\"object\" === this.type(obj)) {\n      _results = [];\n\n      for (k in obj) {\n        v = obj[k];\n        npath = path;\n\n        if (path.length > 0) {\n          npath += \".\";\n        }\n\n        npath += k;\n\n        _results.push(this.traverse(v, cb, npath));\n      }\n\n      return _results;\n    } else {\n      return cb(obj, path);\n    }\n  };\n\n  BiMap.prototype.setNull = function (k, v) {\n    this.kv[k] = v;\n    this.vk[v] = k;\n    this.kindex++;\n    return true;\n  };\n\n  BiMap.prototype.error = function (e) {\n    if (this.throwOnError) {\n      throw new Error(e);\n    }\n\n    return false;\n  };\n\n  BiMap.prototype.removeKey = function (k) {\n    var i, index, _i, _len, _ref;\n\n    if (this.type(this.kv[k]) === \"array\") {\n      _ref = this.kv[k];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        if (this.type(this.vk[i]) === \"array\") {\n          index = this.vk[i].indexOf(k);\n\n          if (index !== -1) {\n            this.vk[i].splice(index);\n          }\n        } else {\n          if (this.vk[i] === k) {\n            delete this.vk[i];\n          }\n        }\n      }\n    } else {\n      delete this.vk[this.kv[k]];\n    }\n\n    return delete this.kv[k];\n  };\n\n  BiMap.prototype.removeVal = function (v) {\n    var i, index, _i, _len, _ref;\n\n    if (this.type(this.vk[v]) === \"array\") {\n      _ref = this.vk[v];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        if (this.type(this.kv[i]) === \"array\") {\n          index = this.kv[i].indexOf(v);\n\n          if (index !== -1) {\n            this.kv[i].splice(index);\n          }\n        } else {\n          if (this.kv[i] === v) {\n            delete this.kv[i];\n          }\n        }\n      }\n    } else {\n      delete this.kv[this.vk[v]];\n    }\n\n    return delete this.vk[v];\n  };\n\n  BiMap.prototype.key = function (k) {\n    return this.kv[k];\n  };\n\n  BiMap.prototype.val = function (v) {\n    return this.vk[v];\n  };\n\n  return BiMap;\n}();\n\ntypeof module === \"undefined\" || module === null || (module.exports = BiMap);","map":null,"metadata":{},"sourceType":"script"}