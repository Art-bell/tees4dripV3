{"ast":null,"code":"import { AdminOrderDialog } from './admin-order-dialog/admin-order-dialog.component';\nimport { getFormattedOrderTotalText, getCardDeliveryText } from '../../../common_utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../transformers/data-from-datetime.pipe\";\n\nfunction AdminOrdersComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"dateFromDatetime\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 6);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h5\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 8);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\", 8);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 8);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"p\", 9);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function AdminOrdersComponent_div_7_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const order_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.viewOrder(order_r1);\n    });\n    i0.ɵɵtext(18, \" View \");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const order_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 9, order_r1.createdAt));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"#\", order_r1.orderNumber, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\" \", order_r1.customerFirstName, \" \", order_r1.customerLastName, \" - \", order_r1.customerEmail, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardDeliveryText(order_r1), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Status: \", ctx_r0.getOverallStatus(order_r1), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getOrderedItemsCount(order_r1), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getFormattedOrderTotalText(order_r1.orderTotal), \" \");\n  }\n}\n\nexport let AdminOrdersComponent = /*#__PURE__*/(() => {\n  class AdminOrdersComponent {\n    constructor(httpClient, dialog) {\n      this.httpClient = httpClient;\n      this.dialog = dialog;\n      this.getFormattedOrderTotalText = getFormattedOrderTotalText;\n      this.getCardDeliveryText = getCardDeliveryText;\n      this.allOrders = [];\n    }\n\n    ngOnInit() {\n      // Fetch new data\n      this.fetchData();\n    }\n\n    fetchData() {\n      this.httpClient.get('/api/orders/').subscribe(res => {\n        this.allOrders = res.map(o => this.processOrder(o));\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    viewOrder(order) {\n      const dialogRef = this.dialog.open(AdminOrderDialog, {\n        data: {\n          order\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result.success) {\n          this.fetchData();\n        }\n      });\n    }\n\n    getOverallStatus(order) {\n      const products = order.products;\n\n      if (products.length === 0) {\n        return '';\n      }\n\n      const firstStatus = products[0].orderProducts.status;\n      return products.every(product => product.orderProducts.status === firstStatus) ? firstStatus : 'multiple';\n    }\n\n    processOrder(order) {\n      console.log(order);\n      return {\n        id: order.id,\n        orderNumber: order.orderNumber,\n        customerFirstName: order.customerFirstName,\n        customerLastName: order.customerLastName,\n        customerEmail: order.customerEmail,\n        customerPhoneNumber: order.customerPhoneNumber,\n        customerStreetAddress1: order.customerStreetAddress1,\n        customerStreetAddress2: order.customerStreetAddress2,\n        customerCity: order.customerCity,\n        customerZipCode: order.customerZipCode,\n        customerCountry: order.customerCountry,\n        hasBeenPaid: order.hasBeenPaid,\n        createdAt: order.createdAt,\n        products: order.products,\n        orderTotal: order.orderTotal\n      };\n    }\n\n    getOrderedItemsCount(order) {\n      return `${order.products.length} item(s) ordered`;\n    }\n\n  }\n\n  AdminOrdersComponent.ɵfac = function AdminOrdersComponent_Factory(t) {\n    return new (t || AdminOrdersComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n\n  AdminOrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminOrdersComponent,\n    selectors: [[\"app-admin-orders\"]],\n    decls: 8,\n    vars: 1,\n    consts: [[1, \"container-fluid\"], [1, \"comp-description\"], [1, \"existing-orders-holder\"], [\"class\", \"card order\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"order\"], [1, \"card-body\"], [1, \"order-number\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"card-text\", \"bolden\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function AdminOrdersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \" All Orders \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"span\");\n        i0.ɵɵtext(5, \" - Manage all the orders from the last 6 months \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵtemplate(7, AdminOrdersComponent_div_7_Template, 19, 11, \"div\", 3);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.allOrders);\n      }\n    },\n    directives: [i3.NgForOf],\n    pipes: [i4.DateFromDatetimePipe],\n    styles: [\".bolden[_ngcontent-%COMP%]{font-weight:800}.card-title[_ngcontent-%COMP%]{font-weight:700}.existing-orders-holder[_ngcontent-%COMP%]{border:2px solid black;background-color:#f4f4f4;padding:20px;min-height:500px;margin-top:30px;display:flex;justify-content:center;gap:10px;flex-wrap:wrap}.order[_ngcontent-%COMP%]{max-height:360px;min-width:500px}.order-number[_ngcontent-%COMP%]{color:#459be7}\", \".comp-description[_ngcontent-%COMP%]{font-family:Lato;font-weight:200;background-color:#fff;padding:20px}.comp-description[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:first-child{font-weight:500}header[_ngcontent-%COMP%]{border:2px solid black}.cat-label[_ngcontent-%COMP%]{color:#827f7f;font-weight:200}\"]\n  });\n  return AdminOrdersComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}