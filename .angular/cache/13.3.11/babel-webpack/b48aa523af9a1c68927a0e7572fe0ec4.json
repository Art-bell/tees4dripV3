{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { getFormattedOrderTotalText, getCardDeliveryText } from '../../../../common_utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"mdb-angular-ui-kit/tooltip\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../../../transformers/data-from-datetime.pipe\";\n\nfunction AdminOrderDialog_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 36)(1, \"div\", 37);\n    i0.ɵɵelement(2, \"img\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 39)(4, \"p\", 40);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 41)(7, \"span\");\n    i0.ɵɵtext(8, \"x\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 42)(11, \"p\", 43);\n    i0.ɵɵtext(12, \"Unit Price Charged\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 44);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 45)(16, \"div\", 42)(17, \"p\", 46);\n    i0.ɵɵtext(18, \"Total Price Charged\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 44);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 47)(22, \"select\", 48);\n    i0.ɵɵlistener(\"change\", function AdminOrderDialog_div_56_Template_select_change_22_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.productSelectChanged();\n    });\n    i0.ɵɵelementStart(23, \"option\", 26);\n    i0.ɵɵtext(24, \"PROCESSING\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"option\", 27);\n    i0.ɵɵtext(26, \"SHIPPED\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"option\", 28);\n    i0.ɵɵtext(28, \"DELIVERED\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"option\", 29);\n    i0.ɵɵtext(30, \"CANCELLED\");\n    i0.ɵɵelementEnd()()()()()();\n  }\n\n  if (rf & 2) {\n    const product_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"src\", product_r1.productImages[0].url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(product_r1.name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", product_r1.orderProducts.quantity, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getFormattedOrderTotalText(product_r1.orderProducts.price), \" \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getFormattedOrderTotalText(product_r1.orderProducts.price * product_r1.orderProducts.quantity), \" \");\n  }\n}\n\nexport let AdminOrderDialog = /*#__PURE__*/(() => {\n  class AdminOrderDialog {\n    constructor(data, formBuilder, snackBar, httpClient, dialogRef) {\n      this.data = data;\n      this.formBuilder = formBuilder;\n      this.snackBar = snackBar;\n      this.httpClient = httpClient;\n      this.dialogRef = dialogRef;\n      this.successfulSubmission = false;\n      this.getFormattedOrderTotalText = getFormattedOrderTotalText;\n      this.getCardDeliveryText = getCardDeliveryText;\n      this.orderForm = this.formBuilder.group({\n        orderStatus: [''],\n        products: this.formBuilder.array([])\n      });\n      this.order = this.data.order;\n      this.addProductsToForm();\n      this.orderForm.controls.orderStatus.setValue(this.getMainOrderStatus());\n    }\n\n    mainSelectChanged(changeEvent) {\n      // When this changes, we need to set all the minions\n      const newStatus = changeEvent.target.value.toUpperCase();\n      this.orderForm.controls.products.controls.forEach(productControl => {\n        productControl.controls.status.setValue(newStatus);\n      });\n    }\n\n    productSelectChanged() {\n      console.log(this.getMainOrderStatus());\n      this.orderForm.controls.orderStatus.setValue(this.getMainOrderStatus());\n    }\n\n    addProductsToForm() {\n      for (const product of this.order.products) {\n        this.orderForm.controls.products.push(this.formBuilder.group({\n          id: [product.id],\n          status: [product.orderProducts.status]\n        }));\n      }\n    }\n\n    getMainOrderStatus() {\n      const products = this.orderForm.controls.products;\n\n      if (products.controls.length === 0) {\n        this.snackBar.open('There are no products in this order', 'Done', {\n          panelClass: ['warning-snackbar']\n        });\n        return '';\n      }\n\n      const firstStatus = products.controls[0].controls.status.value;\n      return products.controls.every(product => product.controls.status.value === firstStatus) ? firstStatus : 'multiple';\n    }\n\n    submitForm() {\n      const orderId = this.order.id;\n      const products = this.orderForm.controls.products.value;\n      this.httpClient.post('/api/orders/updateOrderProducts', {\n        orderId,\n        products\n      }).subscribe(res => {\n        this.snackBar.open(`${res.message}: #${this.order.orderNumber}`, 'Done', {\n          panelClass: ['success-snackbar']\n        });\n        this.dialogRef.close({\n          success: true\n        });\n      }, err => {\n        this.snackBar.open(err.message, 'Done', {\n          panelClass: ['warning-snackbar']\n        });\n      });\n    }\n\n    get hasChanged() {\n      return !this.orderForm.pristine;\n    }\n\n  }\n\n  AdminOrderDialog.ɵfac = function AdminOrderDialog_Factory(t) {\n    return new (t || AdminOrderDialog)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.MatDialogRef));\n  };\n\n  AdminOrderDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminOrderDialog,\n    selectors: [[\"admin-order-dialog\"]],\n    decls: 57,\n    vars: 13,\n    consts: [[1, \"dialog-content\", 3, \"formGroup\"], [1, \"order-details\"], [1, \"date\", \"no-margin-bottom\"], [1, \"order-number-container\"], [1, \"order-number-label\", \"label\", \"no-margin-bottom\"], [1, \"order-number\"], [1, \"customer-details\"], [1, \"customer-name-container\"], [1, \"customer-name-label\", \"label\", \"no-margin-bottom\"], [1, \"customer-name\"], [1, \"customer-email-container\"], [1, \"customer-email-label\", \"label\", \"no-margin-bottom\"], [1, \"customer-email\"], [1, \"customer-phone-container\"], [1, \"customer-phone-label\", \"label\", \"no-margin-bottom\"], [1, \"customer-phone\"], [1, \"delivery-address-container\"], [1, \"delivery-address-label\", \"label\", \"no-margin-bottom\"], [1, \"delivery-address\"], [1, \"total-billed-container\"], [1, \"total-billed-label\", \"label\", \"no-margin-bottom\"], [1, \"total-billed\"], [1, \"order-status-container\"], [1, \"order-status-label\", \"label\", \"no-margin-bottom\"], [1, \"order-status-inner-container\"], [\"formControlName\", \"orderStatus\", 1, \"order-status\", 3, \"change\"], [\"value\", \"PROCESSING\"], [\"value\", \"SHIPPED\"], [\"value\", \"DELIVERED\"], [\"value\", \"CANCELLED\"], [\"hidden\", \"\", \"value\", \"multiple\"], [\"mdbTooltip\", \"Changing this will change all of the product statuses. To reset the product status, just close the dialog.\", 1, \"far\", \"fa-question-circle\"], [1, \"save-button-container\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"save-button\", 3, \"disabled\", \"click\"], [\"formArrayName\", \"products\", 1, \"product-details-container\"], [\"class\", \"product-row\", 4, \"ngFor\", \"ngForOf\"], [1, \"product-row\"], [1, \"product-image-container\"], [1, \"product-image\", 3, \"src\"], [1, \"product-details\", 3, \"formGroupName\"], [1, \"product-name\", \"no-margin-bottom\"], [1, \"product-quantity\", \"no-margin-bottom\"], [1, \"subtotal-container\"], [1, \"subtotal-label\", \"no-margin-bottom\"], [1, \"subtotal\", \"no-margin-bottom\"], [1, \"subtotal-and-status-container\"], [1, \"item-total-label\", \"no-margin-bottom\"], [1, \"status-container\"], [\"formControlName\", \"status\", 1, \"order-status\", 3, \"change\"]],\n    template: function AdminOrderDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"p\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"dateFromDatetime\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"p\", 4);\n        i0.ɵɵtext(7, \"Order Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\", 5);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7)(12, \"p\", 8);\n        i0.ɵɵtext(13, \"Customer Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\", 9);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"p\", 11);\n        i0.ɵɵtext(18, \" Customer Email \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"p\", 12);\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 13)(22, \"p\", 14);\n        i0.ɵɵtext(23, \" Customer Phone \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"p\", 15);\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"div\", 16)(27, \"p\", 17);\n        i0.ɵɵtext(28, \" Delivery Address \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"p\", 18);\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"div\", 19)(32, \"p\", 20);\n        i0.ɵɵtext(33, \"Total Billed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"p\", 21);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(36, \"div\", 22)(37, \"p\", 23);\n        i0.ɵɵtext(38, \"Order Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 24)(40, \"select\", 25);\n        i0.ɵɵlistener(\"change\", function AdminOrderDialog_Template_select_change_40_listener($event) {\n          return ctx.mainSelectChanged($event);\n        });\n        i0.ɵɵelementStart(41, \"option\", 26);\n        i0.ɵɵtext(42, \"PROCESSING\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"option\", 27);\n        i0.ɵɵtext(44, \"SHIPPED\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"option\", 28);\n        i0.ɵɵtext(46, \"DELIVERED\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"option\", 29);\n        i0.ɵɵtext(48, \"CANCELLED\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"option\", 30);\n        i0.ɵɵtext(50, \"(multiple)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(51, \"i\", 31);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(52, \"div\", 32)(53, \"button\", 33);\n        i0.ɵɵlistener(\"click\", function AdminOrderDialog_Template_button_click_53_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵtext(54, \" Save \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(55, \"div\", 34);\n        i0.ɵɵtemplate(56, AdminOrderDialog_div_56_Template, 31, 6, \"div\", 35);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.orderForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 11, ctx.order.createdAt), \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"#\", ctx.order.orderNumber, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate2(\" \", ctx.order.customerFirstName, \" \", ctx.order.customerLastName, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.order.customerEmail);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.order.customerPhoneNumber || \"-\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.getCardDeliveryText(ctx.order), \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.getFormattedOrderTotalText(ctx.order.orderTotal), \" \");\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"disabled\", !ctx.hasChanged);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.order.products);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i5.MdbTooltipDirective, i1.FormArrayName, i6.NgForOf, i1.FormGroupName],\n    pipes: [i7.DateFromDatetimePipe],\n    styles: [\".customer-name[_ngcontent-%COMP%], .customer-email[_ngcontent-%COMP%], .customer-phone[_ngcontent-%COMP%], .delivery-address[_ngcontent-%COMP%], .product-name[_ngcontent-%COMP%], .total-billed[_ngcontent-%COMP%]{font-weight:700}.date[_ngcontent-%COMP%]{font-weight:500}.subtotal[_ngcontent-%COMP%]{font-weight:300}.dialog-content[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:stretch;font-family:Inter,sans-serif;background-color:#fff;padding:20px;gap:10px}.customer-details[_ngcontent-%COMP%]{display:flex;gap:12px;justify-content:space-around;align-items:flex-start}.product-image[_ngcontent-%COMP%]{width:120px}.product-row[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;align-items:center;border-bottom:1px solid #e7e7e7;margin:5px;gap:8px}.no-margin-bottom[_ngcontent-%COMP%]{margin-bottom:0}.order-number[_ngcontent-%COMP%]{font-weight:700;color:#39baf0}.subtotal-and-status-container[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;align-items:flex-end;gap:10px}.product-details-container[_ngcontent-%COMP%]{border-left:1px solid #e7e7e7;max-height:600px;overflow-y:scroll}.label[_ngcontent-%COMP%]{font-weight:200}.save-button-container[_ngcontent-%COMP%]{margin-top:18px}.order-status-inner-container[_ngcontent-%COMP%]{display:flex;gap:10px;align-items:center}.item-total-label[_ngcontent-%COMP%]{font-weight:800}\"]\n  });\n  return AdminOrderDialog;\n})();","map":null,"metadata":{},"sourceType":"module"}