{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nlet AdminAddProductsComponent = class AdminAddProductsComponent {\n  constructor(httpClient, snackBar) {\n    this.httpClient = httpClient;\n    this.snackBar = snackBar;\n    this.activeImageUploadControlName = '';\n    this.availableColors = [];\n    this.availableSizes = [];\n    this.availableCategories = [];\n    this.productForm = new FormGroup({\n      name: new FormControl(''),\n      mainImage: new FormControl(''),\n      quantityAvailable: new FormControl(''),\n      image2: new FormControl(''),\n      image3: new FormControl(''),\n      category: new FormControl(''),\n      description: new FormControl(''),\n      ngn: new FormControl(''),\n      usd: new FormControl('')\n    });\n    this.categoryNameToId = {};\n    this.colorSelectionMap = {};\n    this.sizeSelectionMap = {};\n  }\n\n  ngOnInit() {\n    this.uploadWidget = cloudinary.createUploadWidget({\n      cloudName: 'ltrzxluwr',\n      uploadPreset: 'b9awz5dy',\n      // cropping: true, //add a cropping step\n      // showAdvancedOptions: true,  //add advanced options (public_id and tag)\n      sources: ['local', 'url'],\n      multiple: false,\n      // folder: \"user_images\", //upload files to the specified folder\n      // tags: [\"users\", \"profile\"], //add the given tags to the uploaded files\n      // context: {alt: \"user_uploaded\"}, //add the given context data to the uploaded files\n      clientAllowedFormats: ['png', 'PNG', 'jpg', 'JPG', 'JPEG', 'jpeg'],\n      maxImageFileSize: 20000000 //restrict file size to less than 2MB\n      // maxImageWidth: 2000, //Scales the image down to a width of 2000 pixels before uploading\n      // theme: \"purple\", //change to a purple theme\n\n    }, (error, result) => {\n      var _a;\n\n      if (!error && result && result.event === 'success') {\n        (_a = this.productForm.get(this.activeImageUploadControlName)) === null || _a === void 0 ? void 0 : _a.setValue(result.info.secure_url);\n      } else if (error) {\n        this.snackBar.open('Error uploading image', 'Done', {\n          panelClass: ['warning-snackbar']\n        });\n      }\n    });\n    const colorsRequest$ = this.httpClient.get('/api/colors');\n    const sizesRequest$ = this.httpClient.get('/api/sizes');\n    const productCategories$ = this.httpClient.get('/api/productCategories');\n    forkJoin([colorsRequest$, sizesRequest$, productCategories$]).pipe(map(([colors, sizes, productCategories]) => ({\n      colors,\n      sizes,\n      productCategories\n    }))).subscribe(({\n      colors,\n      sizes,\n      productCategories\n    }) => {\n      this.availableCategories = productCategories;\n      this.availableColors = colors;\n      this.availableSizes = sizes;\n\n      for (const color of this.availableColors) {\n        this.colorSelectionMap[color.name] = false;\n      }\n\n      for (const size of this.availableSizes) {\n        this.sizeSelectionMap[size.name] = false;\n      }\n\n      this.categoryNameToId = this.availableCategories.reduce((acc, curr) => {\n        acc[curr.name] = curr.id;\n        return acc;\n      }, {});\n    });\n  }\n\n  colorChanged(data) {\n    if (data.target.checked) {\n      this.colorSelectionMap[data.target.value] = true;\n    } else {\n      this.colorSelectionMap[data.target.value] = false;\n    }\n  }\n\n  sizeChanged(data) {\n    if (data.target.checked) {\n      this.sizeSelectionMap[data.target.value] = true;\n    } else {\n      this.sizeSelectionMap[data.target.value] = false;\n    }\n  }\n\n  clearInputs() {\n    this.productForm.reset();\n  }\n\n  showFormValues() {\n    console.log(this.productForm.controls);\n  }\n\n  isChecked(color, allColors) {\n    return allColors.includes(color);\n  }\n\n  get getMainImage() {\n    return this.productForm.controls.mainImage.value ? this.productForm.controls.mainImage.value : 'https://socialistmodernism.com/wp-content/uploads/2017/07/placeholder-image.png?w=640';\n  }\n\n  getImageByIndex(index) {\n    switch (index) {\n      case 1:\n        return this.productForm.controls.image2.value;\n\n      case 2:\n        return this.productForm.controls.image3.value;\n\n      default:\n        return this.productForm.controls.mainImage.value;\n    }\n  }\n\n  getSelectedColorIds() {\n    const selectedColors = [];\n\n    for (const aColor of this.availableColors) {\n      if (this.colorSelectionMap[aColor.name]) {\n        selectedColors.push(aColor.id);\n      }\n    }\n\n    return selectedColors;\n  }\n\n  getSelectedSizeIds() {\n    const selectedSizes = [];\n\n    for (const aSize of this.availableSizes) {\n      if (this.sizeSelectionMap[aSize.name]) {\n        selectedSizes.push(aSize.id);\n      }\n    }\n\n    return selectedSizes;\n  }\n\n  openWidget(controlName) {\n    this.activeImageUploadControlName = controlName;\n    this.uploadWidget.open();\n  }\n\n  submitNewProduct() {\n    // Verify the presence of the required fields.\n    const formControls = this.productForm.controls;\n    const selectedColorIds = this.getSelectedColorIds();\n    const selectedSizeIds = this.getSelectedSizeIds();\n    let errorMessage = '';\n\n    if (!formControls.name.value) {\n      errorMessage = 'A name is required';\n    } else if (formControls.quantityAvailable.value === '' || formControls.quantityAvailable.value < 0 || formControls.quantityAvailable.value > 10000) {\n      errorMessage = 'Quantity available must be between 0 and 10000 (inclusive)';\n    } else if (!formControls.mainImage.value) {\n      errorMessage = 'A main image is required';\n    } else if (!formControls.description.value) {\n      errorMessage = 'A description is required';\n    } else if (!formControls.ngn.value || formControls.ngn.value < 0) {\n      errorMessage = 'An non-negative NGN price is required';\n    } else if (!formControls.usd.value || formControls.usd.value < 0) {\n      errorMessage = 'A non-negative USD price is required';\n    } else if (!formControls.category.value) {\n      errorMessage = 'A category must be selected';\n    } else if (selectedColorIds.length === 0) {\n      errorMessage = 'At least one color must be selected';\n    } else if (selectedSizeIds.length === 0) {\n      errorMessage = 'At least one size must be selected';\n    }\n\n    if (errorMessage) {\n      this.snackBar.open(errorMessage, 'Done', {\n        panelClass: ['warning-snackbar']\n      });\n      return;\n    }\n\n    const categoryId = this.categoryNameToId[formControls.category.value];\n    this.httpClient.post('/api/products/createProduct', {\n      token: '',\n      name: formControls.name.value,\n      quantityAvailable: formControls.quantityAvailable.value,\n      ngn: formControls.ngn.value,\n      usd: formControls.usd.value,\n      description: formControls.description.value,\n      categoryId: categoryId,\n      colors: selectedColorIds,\n      sizes: selectedSizeIds,\n      images: [this.productForm.controls.mainImage.value, this.productForm.controls.image2.value, this.productForm.controls.image3.value]\n    }).subscribe(data => {\n      if (data.message === 'success') {\n        this.snackBar.open('Successfully created product', 'Done', {\n          panelClass: ['success-snackbar']\n        });\n        this.productForm.reset();\n        return;\n      } else {\n        this.snackBar.open('An error occurred while trying to create the product', 'Done', {\n          panelClass: ['warning-snackbar']\n        });\n        return;\n      }\n    }, err => {\n      this.snackBar.open('An error occurred while trying to create the product', 'Done', {\n        panelClass: ['warning-snackbar']\n      });\n      return;\n    });\n  }\n\n};\nAdminAddProductsComponent = __decorate([Component({\n  selector: 'app-admin-add-products',\n  templateUrl: './admin-add-products.component.html',\n  styleUrls: ['./admin-add-products.component.css', '../admin-styles.css']\n})], AdminAddProductsComponent);\nexport { AdminAddProductsComponent };","map":null,"metadata":{},"sourceType":"module"}